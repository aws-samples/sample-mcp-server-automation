# Python MCP Server with mcp-proxy CLI
FROM python:3.12-bullseye

# Install system dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    wget \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js (needed for mcp-proxy)
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# Install uv (for uvx command)
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.local/bin:/root/.cargo/bin:$PATH"

# Install mcp-proxy globally (needed for HTTP transport)
RUN npm install -g mcp-proxy

# Set working directory
WORKDIR /app

{% if package_info.manager == 'uv' and package_info.project_file %}
# Install MCP server directly from GitHub repository using uv
{% if package_info.subfolder %}
RUN uv tool install "git+{{ package_info.github_url }}@{{ package_info.branch }}#subdirectory={{ package_info.subfolder }}"
{% else %}
RUN uv tool install "git+{{ package_info.github_url }}@{{ package_info.branch }}"
{% endif %}
{% else %}
# Copy MCP server files and install dependencies
COPY mcp-server/ ./mcp-server/

{% if package_info.manager == 'pip' and package_info.requirements_file %}
RUN pip install --no-cache-dir -r mcp-server/{{ package_info.requirements_file }}
{% elif package_info.manager == 'poetry' and package_info.project_file %}
# Install poetry
RUN pip install --no-cache-dir poetry
RUN cd mcp-server && \
    poetry config virtualenvs.create false && \
    poetry install --no-dev
{% elif package_info.manager == 'pip' and package_info.project_file == 'setup.py' %}
RUN cd mcp-server && \
    pip install --no-cache-dir .
{% endif %}
{% endif %}

# Set up Python environment
ENV PYTHONPATH="/app/mcp-server:$PYTHONPATH"

{% if package_info.environment_variables %}
# Set custom environment variables
{% for key, value in package_info.environment_variables.items() %}
ENV {{ key }}="{{ value }}"
{% endfor %}
{% endif %}

# Health check - check if port 8000 is listening
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD nc -z localhost 8000 || exit 1

# Expose port
EXPOSE 8000

# Use mcp-proxy CLI to start the server with the detected MCP server command
ENTRYPOINT {{ package_info.entrypoint_command | tojson }}